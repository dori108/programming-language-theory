기계어 : 1과 0으로 이루어진 언어

c++은 c언어의 유지, 확장 버전

추가된 요소
- 클래스 개념
- 가상함수
- 연산자 중복정의
- 다중상속
- 템플릿
- 예외처리
- 객체 지향적 특징 

* 객체 지향 프로그램이란? 데이터를 중심으로 메소드와 속성을 하나로 묶는 것이다.
객체(Object)
정의: 객체는 데이터(속성)와 이 데이터를 조작하는 함수(메서드)로 구성된 프로그래밍의 기본 단위.
예시: 자동차 객체는 속도, 색상 등의 속성과 가속, 감속 등의 메서드를 가질 수 있음.

클래스(Class)
정의: 클래스를 이용하여 하나의 객체 속성과 동작들을 한 곳에 모아서 사용한다. 박스 같은 느낌
예시: 자동차 클래스는 특정 자동차 객체를 생성할 수 있는 설계도.

상속(Inheritance)
정의: 상속은 한 클래스가 다른 클래스의 속성과 메서드를 물려받는 기능. 코드 재사용율을 높이는 것이 큰 목표.
예시: 스포츠카 클래스가 자동차 클래스를 상속받아 자동차의 모든 속성과 메서드를 사용할 수 있음.

캡슐화(Encapsulation)
정의: 캡슐화는 객체의 데이터와 메서드를 보호하여 외부에서 직접 접근하지 못하도록 하는 것. 여러가지 버전의 캡슐화가 존재함(일부 캡슐화는 메소드를 통해 접근 가능).
예시: 자동차의 속도를 직접 변경하지 않고 속도조절 메서드를 통해서만 변경할 수 있음.

new와 delete 연산자
정의: 동적 메모리 할당과 해제를 담당하는 연산자이다. 동적할당하는 데에 사용된다. heap을 가져다가 쓰기 때문에 반드시 해제 메소드도 함께 사용해줘야함.

<이해하기 힘든 영역>
다형성(Polymorphism)
정의: 다형성은 동일한 이름의 메서드가 다른 객체에서 다르게 동작하는 것. 
예시: 자동차 클래스의 운전 메서드와 스포츠카 클래스의 운전 메서드가 다르게 구현될 수 있음.
- 함수 중복(function overloading) 매개 변수만 다르면 동일한 이름의 함수를 여러 개 만들 수 있다. 
- 연산자 중복(operator overloading) 대상에 따라서 동일한 연산자로 새로운 연산을 정의할 수 있다. 

추상화(Abstraction)
정의: 추상화는 복잡한 시스템에서 핵심적인 부분만을 노출하고, 불필요한 세부 사항을 숨기는 것.
예시: 동물이라는 추상 클래스를 통해 공통된 특성을 정의하고, 구체적인 동물 클래스에서 구체적인 특성을 구현함.

제네릭(generics)
정의: 클래스 정의를 자료형에 상관없이 재사용하는 기술이다. 



c++의 장점
실행 속도 : 다른 언어의 실행 속도에 비해 매우 빠름
절차지향, 객체 지향, 제네릭을 동시에 지원함
-> 멀티 패러다임이라고 함.

*절차지향이란?
함수를 이용한 프로그래밍 방식
함수, 프로시저(함수의 일종이나 출력값이 없다.)

함수를 이용하여 프로그래밍을 하면 재사용성이 높아진다.
피호출자 함수는 모든 수행이 종료된 뒤 호출자 함수도 되돌아간다.

























